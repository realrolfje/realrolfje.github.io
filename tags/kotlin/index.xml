<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on www.rolfje.com</title><link>https://realrolfje.github.io/rolfje.com/tags/kotlin/</link><description>Recent content in Kotlin on www.rolfje.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© rolfje.com</copyright><lastBuildDate>Wed, 01 Jul 2020 21:37:34 +0000</lastBuildDate><atom:link href="https://realrolfje.github.io/rolfje.com/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Kotlin extension functions</title><link>https://realrolfje.github.io/rolfje.com/2020/07/01/testing-kotlin-extension-functions/</link><pubDate>Wed, 01 Jul 2020 21:37:34 +0000</pubDate><guid>https://realrolfje.github.io/rolfje.com/2020/07/01/testing-kotlin-extension-functions/</guid><description>
&lt;p>&lt;figure class="float_right">&lt;a href="https://youtu.be/MKW8cxjBLa8">&lt;img src="83b0631f950fab03ac9854f0330baca2.jpg" width="120"/>&lt;/a>
&lt;/figure>
This might seem obvious for many Kotlin programmers but I did not realize that extension functions are also applied to mocks. This means that if you have a class you can not instantiate for some reason, like the constructor is private and in another package, or the class is abstract, you can still test your extension functions by simply mocking it.&lt;/p>
&lt;!-- more -->
&lt;p>Let's say I have an extension function on the &lt;code>com.sun.java.swing.action.ActionManager&lt;/code> which returns &lt;code>true&lt;/code> when the action manager contains a &lt;code>save&lt;/code> action. (Yes it is a silly example I know).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="ln">1&lt;/span>&lt;span class="cm">/** Returns true if the actionManager has a &amp;#34;save&amp;#34; action */&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">ActionManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">canSave&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">getAction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;save&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course we want to test our extension function, but writing a complete subclass of ActionManager just to test the extension function would be silly. Instead you can simply mock it with mockk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="ln">1&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nn">io.mockk.coEvery&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nn">io.mockk.mockk&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nd">@Test&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="k">internal&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">testCanSaveExtensionFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">mockActionManager&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ActionManager&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mockk&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="n">coEvery&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">mockActionManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getAction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;save&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">answers&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">mockk&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="n">assertEquals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mockActionManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">canSave&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This test will not only run your extension function, but you can even verify that the extension function calls the correct functions on the extended class because mockk lets you check invocations.&lt;/p>
&lt;p>It seems like a silly little tip, but I liked it so much when I found this out I thought I'd share it with you.&lt;/p>
&lt;p>Hope to be more active on the blog again, until then happy coding!&lt;/p></description></item></channel></rss>