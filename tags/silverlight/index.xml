<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Silverlight on www.rolfje.com</title><link>https://realrolfje.github.io/tags/silverlight/</link><description>Recent content in Silverlight on www.rolfje.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © rolfje.com</copyright><lastBuildDate>Thu, 18 Jul 2013 20:48:18 +0000</lastBuildDate><atom:link href="https://realrolfje.github.io/tags/silverlight/index.xml" rel="self" type="application/rss+xml"/><item><title>Non-Java Binary Dependencies in Maven</title><link>https://realrolfje.github.io/2013/07/18/non-java-binary-dependencies-in-maven/</link><pubDate>Thu, 18 Jul 2013 20:48:18 +0000</pubDate><guid>https://realrolfje.github.io/2013/07/18/non-java-binary-dependencies-in-maven/</guid><description>
&lt;p>&lt;a href="http://http://www.thinkgeek.com/">&lt;img src="binary-pillow.jpg" alt="binary-pillow">
&lt;/a>Suppose you have a Java Server application, and some of the runtime binaries in that application are external to your application. Generated image files, compiled Silverlight components in your pages, or resource files which are managed by an external team.&lt;/p>
&lt;p>Much like the jar files used by your application, these external binaries can be seen as dependencies, with versions. This blogpost assumes your project is built with Maven 2, because the real world &lt;a href="http://rolfje.wordpress.com/2012/12/02/the-world-is-not-a-green-field/">isn't always a greenfield project&lt;/a>.&lt;/p>
&lt;p>Because Maven is designed around jar file dependencies, and a lot of it's internal decisions are based on file extensions, it looks like this problem can not be tackled with Maven. But there is a way to do this. It will decouple your sub-projects and make version and dependency management much better.&lt;/p>
&lt;!-- more -->**Uploading the binaries files in a remote repository**
&lt;p>The hardest part of this problem is getting the binary uploaded to your maven repository. It seems that there is no other way than disquising it as a jar file, which only leads to confusion. But it turns out that you can, actually upload a .exe file to the repository. To do so, place a pom.xml file in the root of the project from which you want to upload the binary file. You do not have to mavenize the whole project, we only use Maven to do the upload to the repository.&lt;/p>
&lt;p>Find the file you want to deploy. It can be placed anywhere but I prefer to use the target directory so it looks maven-esque. Make sure you choose the &amp;quot;pom&amp;quot; packaging type so maven does not generate a jar for you.&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; highlight=&amp;quot;11,16,23,24&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]&lt;project>
&lt;groupId>com.rolfje.example&lt;/groupId>
&lt;artifactId>executablestuff&lt;/artifactId>
&lt;packaging>pom&lt;/packaging>
&lt;version>1.0-SNAPSHOT&lt;/version>
&lt;name>Some executable component&lt;/name>
&lt;build>
&lt;plugins>
&lt;plugin>
&lt;groupId>org.codehaus.mojo&lt;/groupId>
&lt;artifactId>build-helper-maven-plugin&lt;/artifactId>
&lt;version>1.8&lt;/version>
&lt;executions>
&lt;execution>
&lt;id>attach-artifacts&lt;/id>
&lt;phase>package&lt;/phase>
&lt;goals>
&lt;goal>attach-artifact&lt;/goal>
&lt;/goals>
&lt;configuration>
&lt;artifacts>
&lt;artifact>
&lt;file>${basedir}/target/myexecutable.exe&lt;/file>
&lt;type>exe&lt;/type>
&lt;/artifact>
&lt;/artifacts>
&lt;/configuration>
&lt;/execution>
&lt;/executions>
&lt;/plugin>
&lt;/plugins>
&lt;/build>
&lt;/project>
[/sourcecode]&lt;/p>
&lt;p>When you run &amp;quot;maven install&amp;quot;, your exe file will be pushed to your local repository (more on using a remote repository further down).&lt;/p>
&lt;p>&lt;strong>Downloading the binaries files from the remote repository&lt;/strong>
In the project that will depend on your binary file, you want to copy it from your repository into your target directory at the compile stage. You can do this by adding the following plugin configuration to your pom:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; highlight=&amp;quot;14,15,16,17,18&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;plugin>
&lt;groupId>org.apache.maven.plugins&lt;/groupId>
&lt;artifactId>maven-dependency-plugin&lt;/artifactId>
&lt;executions>
&lt;execution>
&lt;id>copy-dependency&lt;/id>
&lt;phase>compile&lt;/phase>
&lt;goals>
&lt;goal>copy&lt;/goal>
&lt;/goals>
&lt;configuration>
&lt;artifactItems>
&lt;artifactItem>
&lt;groupId>com.rolfje.example&lt;/groupId>
&lt;artifactId>executablestuff&lt;/artifactId>
&lt;type>exe&lt;/type>
&lt;overWrite>true&lt;/overWrite>
&lt;outputDirectory>target&lt;/outputDirectory>
&lt;/artifactItem>
&lt;/artifactItems>
&lt;/configuration>
&lt;/execution>
&lt;/executions>
&lt;/plugin>
[/sourcecode]&lt;/p>
&lt;p>&lt;strong>Multiple artifacts in a single dependency&lt;/strong>
When the non-java project produces multiple files with the same extension, you will notice that the trick I just described will not work because you can only specify one file with one extension. This is because maven uses the extension to locate the exact file.&lt;/p>
&lt;p>In order to deploy multiple files, it is best you bundle them in a zip and unpack them at the other end. In the non-java project, add the assembly plugin:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; highlight=&amp;quot;2,15,17&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;plugin>
&lt;artifactId>maven-assembly-plugin&lt;/artifactId>
&lt;version>2.2-beta-2&lt;/version>
&lt;executions>
&lt;execution>
&lt;id>generate-assembly&lt;/id>
&lt;phase>package&lt;/phase>
&lt;goals>
&lt;goal>single&lt;/goal>
&lt;/goals>
&lt;/execution>
&lt;/executions>
&lt;configuration>
&lt;descriptors>
&lt;descriptor>src/maven/descriptor.xml&lt;/descriptor>
&lt;/descriptors>
&lt;finalName>${artifactId}&lt;/finalName>
&lt;outputDirectory>target&lt;/outputDirectory>
&lt;/configuration>
&lt;/plugin>
[/sourcecode]&lt;/p>
&lt;p>We use so the zipfile will always have the same name in the target directory, which will make build-helper-maven-plugin configuration easier. It also makes it easier for non-maven scripts to find the file. Upon deploying to the repository, maven will fix the filename so don't worry about that too much.&lt;/p>
&lt;p>The contents of src/maven/descriptor.xml can look like this:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; highlight=&amp;quot;21,22&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]&lt;/p>
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;p>&lt;assembly xmlns="http://maven.apache.org/POM/4.0.0"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
http://maven.apache.org/xsd/assembly-1.0.0.xsd"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;/p>
&lt;formats>
&lt;format>zip&lt;/format>
&lt;/formats>
&lt;p>&lt;includeBaseDirectory>false&lt;/includeBaseDirectory>&lt;/p>
&lt;fileSets>
&lt;fileSet>
&lt;directory>target/binaries&lt;/directory>
&lt;outputDirectory>&lt;/outputDirectory>
&lt;includes>
&lt;include>*.exe&lt;/include>
&lt;include>*.dll&lt;/include>
&lt;/includes>
&lt;/fileSet>
&lt;/fileSets>
&lt;/assembly>
[/sourcecode]
&lt;p>In the java project, you don't need to change much. Instead of &amp;quot;copy&amp;quot;, you tell the dependency plugin to unzip the file into a directory:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; highlight=&amp;quot;3,9,16,18&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;plugin>
&lt;groupId>org.apache.maven.plugins&lt;/groupId>
&lt;artifactId>maven-dependency-plugin&lt;/artifactId>
&lt;executions>
&lt;execution>
&lt;id>copy-dependency&lt;/id>
&lt;phase>compile&lt;/phase>
&lt;goals>
&lt;goal>unpack&lt;/goal>
&lt;/goals>
&lt;configuration>
&lt;artifactItems>
&lt;artifactItem>
&lt;groupId>com.rolfje.example&lt;/groupId>
&lt;artifactId>executablestuff&lt;/artifactId>
&lt;type>zip&lt;/type>
&lt;overWrite>true&lt;/overWrite>
&lt;outputDirectory>target/unpacked&lt;/outputDirectory>
&lt;/artifactItem>
&lt;/artifactItems>
&lt;/configuration>
&lt;/execution>
&lt;/executions>
&lt;/plugin>
[/sourcecode]&lt;/p>
&lt;p>&lt;strong>Deploying to a remote repository&lt;/strong>
If the two builds run on two different machines, you may need an external repository. For larger projects, I'd recommend an external, locally managed repository not just for disctribution, but also for speed. Your team will have almost instant access to libraries, speeding up your (initial) builds. Installing a local &lt;a href="http://www.jfrog.com/home/v_artifactory_opensource_overview">jFrog Artifactory&lt;/a> is a good choice.&lt;/p>
&lt;p>To make deployment to this external repository work, you need to add the following to your non-java pom file:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;distributionManagement>&lt;/p>
&lt;!-- final releases will be deployed to this repository -->
&lt;repository>
&lt;id>artifactory.releases&lt;/id>
&lt;name>Artifactory releases&lt;/name>
&lt;url>http://myartifactory.example.com/artifactory/libs-release-local&lt;/url>
&lt;/repository>
&lt;!-- snapshot releases will be deployed to this repository -->
&lt;snapshotRepository>
&lt;id>artifactory.snapshots&lt;/id>
&lt;name>Artifactory snapshots&lt;/name>
&lt;url>http://myartifactory.example.com/artifactory/libs-snapshots-local&lt;/url>
&lt;/snapshotRepository>
&lt;/distributionManagement>
[/sourcecode]
&lt;p>If you get an error like:&lt;/p>
&lt;blockquote>Error deploying artifact: Failed to transfer file: ://myartifactory.example.com/artifactory/libs-snapshots-local/com.rolfje.example/1.0-SNAPSHOT/executablestuff-1.0-20130604.103146-1.pom. Return code is: 401&lt;/blockquote>
&lt;p>Your artifactory is probably not configured to do anonymous deployments. Make sure you can access the artifactory with a userid and password, and add those to the ~/.m2/settings.xml of the machine which will deploy the binary artifacts.&lt;/p>
&lt;p>I advise to use a special &amp;quot;deployment user&amp;quot; to do this, so you can share this configuration between builds and not depend on a user changig his password. The correct way to store a password for the Artifactory is &lt;a href="http://wiki.jfrog.org/confluence/display/RTF20/Using+Secured+Passwords+in+Settings.xml">explained here&lt;/a>.  Using the DESede encrypted password on your Artifactory profile page, the maven settings.xml file of the buildserver user can look like this:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;settings>
&lt;server>
&lt;id>artifactory.releases&lt;/id>
&lt;username>your-repository-username&lt;/username>
&lt;password>{DESede}kIniw826kaluA1OPa865A==&lt;/password>
&lt;/server>
&lt;server>
&lt;id>artifactory.snapshots&lt;/id>
&lt;username>your-repository-username&lt;/username>
&lt;password>{DESede}kIniw826kaluA1OPa865A==&lt;/password>
&lt;/server>
&lt;/settings>
[/sourcecode]&lt;/p>
&lt;p>And then, of course, you need your java project to know where to download the dependencies so add this to the pom.xml file in your binary project:&lt;/p>
&lt;p>[sourcecode language=&amp;quot;xml&amp;quot; autolinks=&amp;quot;false&amp;quot; padlinenumbers=&amp;quot;true&amp;quot;]
&lt;repositories>
&lt;repository>
&lt;id>central&lt;/id>
&lt;url>&lt;a href="http://myartifactory.example.com/repo">http://myartifactory.example.com/repo&lt;/a>&lt;/url>
&lt;releases>
&lt;enabled>true&lt;/enabled>
&lt;checksumPolicy>fail&lt;/checksumPolicy>
&lt;/releases>
&lt;snapshots>
&lt;enabled>true&lt;/enabled>
&lt;checksumPolicy>fail&lt;/checksumPolicy>
&lt;/snapshots>
&lt;/repository>
&lt;/repositories>
[/sourcecode]&lt;/p>
&lt;p>If you've reached the end of this blogpost without problems, you should now be able to build your binaries, have them uploaded with correct versions to your external repository, and your Maven/Java build server will download the correct versions of these dependencies at build time. Switching back and forth between tags on your Java project will automatically fetch the correct versions of the binaries, the same way as it does for your jar dependencies.&lt;/p>
&lt;p>Happy coding!&lt;/p></description></item></channel></rss>